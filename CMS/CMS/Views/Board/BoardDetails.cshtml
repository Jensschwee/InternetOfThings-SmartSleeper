@using CMS.Models
@using Microsoft.CodeAnalysis.CSharp.Syntax
@model List<CMS.Models.SensorReadingModel>

<title>ViewData.title</title>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
<script src="http://d3js.org/d3.v3.min.js" type="text/javascript"></script>
<script type="text/javascript" src="../js/jquery.tipsy.js"></script>
<link href="../css/tipsy.css" rel="stylesheet" type="text/css" />
<link href="../css/d3LineChart.css" rel="stylesheet" type="text/css" />

@if (Model != null)
{
    <div id="chartTemperature"></div>
    <div id="chartHumidity"></div>
    <div id="chartLux"></div>
    <div id="chartPressure"></div>

}
else
{
    <span>
        <strong>
            THIS DEVICES IS NOT FOUND
        </strong>
    </span>
}
<script src="../js/d3LineChart.js" type="text/javascript"></script>

<script>
   var getTemperatureFunktion = function generateData1() {
       var data = [];
        @foreach (SensorReadingModel se in Model)
        {
            @:var date = new Date();
            @:date.setYear(@se.SensorTime.Year);
            @:date.setMonth(@se.SensorTime.Month-1);
            @:date.setDate(@se.SensorTime.Day);
            @:date.setHours(@se.SensorTime.Hour, @se.SensorTime.Minute, @se.SensorTime.Second, @se.SensorTime.Millisecond);
            @:data.push({ 'value': @se.temperature.ToString().Replace(",","."), 'date': date });
        }
        return data;
    }

    draw(getTemperatureFunktion(), "#chartTemperature", "Temperature");

    var getHumidityFunktion = function generateData2() {
       var data = [];
        @foreach (SensorReadingModel se in Model)
        {
            @:var date = new Date();
            @:date.setYear(@se.SensorTime.Year);
            @:date.setMonth(@se.SensorTime.Month-1);
            @:date.setDate(@se.SensorTime.Day);
            @:date.setHours(@se.SensorTime.Hour, @se.SensorTime.Minute, @se.SensorTime.Second, @se.SensorTime.Millisecond);
            @:data.push({ 'value': @se.humidity.ToString().Replace(",","."), 'date': date });
        }
        return data;
    }

    draw(getHumidityFunktion(), "#chartHumidity", "Humidity");

    var getLuxFunktion = function generateData3() {
       var data = [];
        @foreach (SensorReadingModel se in Model)
        {
            @:var date = new Date();
            @:date.setYear(@se.SensorTime.Year);
            @:date.setMonth(@se.SensorTime.Month-1);
            @:date.setDate(@se.SensorTime.Day);
            @:date.setHours(@se.SensorTime.Hour, @se.SensorTime.Minute, @se.SensorTime.Second, @se.SensorTime.Millisecond);
            @:data.push({ 'value': @se.lux.ToString().Replace(",","."), 'date': date });
        }
        return data;
    }

    draw(getLuxFunktion(), "#chartLux", "Lux");

    var getPressureFunktion = function generateData4() {
       var data = [];
        @foreach (SensorReadingModel se in Model)
        {
            @:var date = new Date();
            @:date.setYear(@se.SensorTime.Year);
            @:date.setMonth(@se.SensorTime.Month-1);
            @:date.setDate(@se.SensorTime.Day);
            @:date.setHours(@se.SensorTime.Hour, @se.SensorTime.Minute, @se.SensorTime.Second, @se.SensorTime.Millisecond);
            @:data.push({ 'value': @se.pressure.ToString().Replace(",","."), 'date': date });
        }
        return data;
    }

    draw(getPressureFunktion(), "#chartPressure", "Pressure");

</script>